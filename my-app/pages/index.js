import Head from "next/head";
import styles from "../styles/Home.module.css";
import Web3Modal, { providers } from "web3modal";
import WalletConnectProvider from "@walletconnect/web3-provider";
import { Contract, providers, utils } from "ethers";
import { abi, MINT_TEST_CONTRACT_ADDRESS } from "../constants";
import React, { useEffect, useRef, useState} from "react";


export default function Home() {

  const [walletConnected, setWalletConnected] = useState(false);
  const [tokenIdsMinted, setTokenIdsMinted] = useState("0");
  const [loading, setLoading] = useState(false);
  const [isOwner, setIsOwner] = useState(false);
  const web3ModalRef = useRef();

  
  const getTokenIdsMinted = async () => {
    try {
      const provider = await getProviderOrSigner();
      const nftContract = new Contract(MINT_TEST_CONTRACT_ADDRESS, abi, provider);
      const _tokenIds = await nftContract.tokenIds();
      setTokenIdsMinted(_tokenIds.toString());
    } catch (err) {
      console.error(err);
    }
  };

  
  const withdraw = async () => {
    try{
      const signer = await getProviderOrSigner(true);
      const testMintContract = new Contract (
        MINT_TEST_CONTRACT_ADDRESS,
        abi,
        signer
      );

      await getOwner();
      if (isOwner == false){
        window.alert("Not Owner")
      }else {
        const txn = await testMintContract.withdraw();
        setLoading(true);
        await txn.wait();
        setLoading(false);
      }

    }catch (err) {
      console.error(err);
    }
  }

  const getOwner = async () => {
    try {
      const provider = await getProviderOrSigner();
      const testMintContract = new Contract(MINT_TEST_CONTRACT_ADDRESS, abi, provider);
      
      const _owner = await testMintContract.owner();

      const signer = await getProviderOrSigner(true);
      const address = await signer.getAddress();
      if (address.toLowerCase() === _owner.toLowerCase()) {
        setIsOwner(true);
      }
    } catch (err) {
      console.error(err.message);
    }
  };

  const Mint = async () => {
    try {
      const signer = await getProviderOrSigner(true);

      const testMintContract = new Contract(
        MINT_TEST_CONTRACT_ADDRESS,
        abi,
        signer
      );
      const tx = await testMintContract.mint({
        value: utils.parseEther("0.02"),
      });
      setLoading(true);
      await tx.wait();
      setLoading(false);
      window.alert("You successfully minted a Test Mint!");
    } catch (err) {
      console.error(err);
    }
  };
  
  const providerOptions = {
    walletconnect: {
      package: WalletConnectProvider,
      options: {
        infuraId: "71f2f5d55f4447498c2cd84f8934c165"
      }
    }
  };

  const connectWallet = async () => {
    try {
      await getProviderOrSigner();
      setWalletConnected(true);
    } catch (err) {
      console.error(err);
    }
  };

  const getProviderOrSigner = async (needSigner = false) => {
    const provider = await web3ModalRef.current.connect();
    const web3Provider = new providers.Web3Provider(provider);

    const { chainId } = await web3Provider.getNetwork();
    if (chainId !== 4) {
      window.alert("Change the network to Rinkeby");
      throw new Error("Change network to Rinkeby");
    }

    if (needSigner) {
      const signer = web3Provider.getSigner();
      return signer;
    }
    return web3Provider;
  };

  useEffect(() => {
    if (!walletConnected) {
      web3ModalRef.current = new Web3Modal({
        network: "rinkeby",
        providerOptions,
        cacheProvider: false,
        disableInjectedProvider: false,
      });
    }
    connectWallet();
    getTokenIdsMinted();
  }, [walletConnected]);


  const renderButton = () => {
    if (!walletConnected) {
      return (
        <button onClick={connectWallet} className={styles.button}>
          CONNECT WALLET
        </button>
      );
    } if (loading) {
      return <button className={styles.button}>Loading.....</button>;
    } else {
      return (
        <div className={styles.body}>
          <h1>{tokenIdsMinted}/20 minted </h1>          
          <button className={styles.button} onClick={Mint}>MINT</button>
          <button className={styles.button} onClick={withdraw}>WITHDRAW</button>
        </div>
      );
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.main}>
        {renderButton()}
      </div>
    </div>
  )
}
